%% File encoding: UTF-8
\ProvidesPackage{hgblistings}

\RequirePackage{ifthen}
%\RequirePackage{upquote} % Setzt "richtige" Quotes in verbatim-Umgebung
%\RequirePackage{textcomp}

\RequirePackage{xcolor}
\definecolor{ListingsBackgroundColor}{gray}{0.95}
\definecolor{lightgray}{gray}{0.9}
\definecolor{midgray}{gray}{0.5}
\definecolor{keywordColor}{RGB}{0,0,255}
\definecolor{commentColor}{RGB}{0,128,0}
\definecolor{stringColor}{RGB}{163,21,21}


%\RequirePackage{listings}			% utf8-change
\RequirePackage{listingsutf8} 	% utf8-change
\lstset{
%language=Java,%
inputencoding=utf8,	% utf8-change
extendedchars=true,	% utf8-change
basicstyle=\ttfamily\footnotesize,%
keywordstyle=\color{keywordColor},%\ttfamily,%\bfseries,
identifierstyle=,%\sffamily, %\bfseries
commentstyle=\color{commentColor}\normalfont\itshape,%
stringstyle=\ttfamily\color{stringColor},%
showstringspaces=false,%
columns = flexible,% fixed, 
breaklines=true,%
tabsize=2, %
backgroundcolor=,%\color{ListingsBackgroundColor},
xleftmargin=6mm,%
frame=single,
framexleftmargin=6mm,
numbers=left,%
numbersep=5pt,%
numberstyle=\normalfont\scriptsize,%
stepnumber=1,%
numberfirstline=true,%
numberblanklines=true,%
texcl=false,%		%important: read program comments as Latex content
mathescape=false,	%no mathescape by default
upquote=true,%
keepspaces=true,%
}

\RequirePackage[utf8]{inputenc}
\lstset{literate=% to allow Umlauts etc. in listed code % utf8-change
{Ö}{{\"O}}1
{Ä}{{\"A}}1
{Ü}{{\"U}}1
{ü}{{\"u}}1
{ä}{{\"a}}1
{ö}{{\"o}}1
{ß}{{\ss}}2
}

% --- Code Environments

% Code Environment for C (ANSI)
\lstnewenvironment{CCode}[1][]
{\lstset{%
	language=[ANSI]C,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Code Environment for C++ (ISO)
\lstnewenvironment{CppCode}[1][]
{\lstset{%
	language=[ISO]C++,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}

% Code Environment for C#
\lstnewenvironment{CsCode}[1][]
{\lstset{%
	language=[Sharp]C,
	morekeywords={get,set},
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Language Definition and Code Environment for CSS
\lstdefinelanguage{CSS}
{	morekeywords={color,background,margin,padding,font,weight,display,position,top,%
		left,right,bottom,list,style,border,size,white,space,min,width},
	sensitive=false,
	morecomment=[l]{//},
	morecomment=[s]{/*}{*/},
	morestring=[b]"
}

\lstnewenvironment{CssCode}[1][]
{\lstset{%
	language=CSS,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Code Enivornmente for Generic Code
\lstnewenvironment{GenericCode}[1][]
{\lstset{%
	language={},
	keepspaces=true,
	commentstyle={},
	texcl=false,
	escapechar={},
	escapeinside={/+}{+/},
	#1}}
{}


% Code Enivornmente for HTML
\lstnewenvironment{HtmlCode}[1][]
{\lstset{%
	language=HTML,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Code Enivornmente for Java
\lstnewenvironment{JavaCode}[1][]
{\lstset{%
	language=Java,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Language Definition and Code Environment for JavaScript
\lstdefinelanguage{JavaScript}
{	keywords={attributes, class, classend, do, empty, endif, endwhile, fail, function,% 
		functionend, if, implements, in, inherit, inout, not, of, operations, out,% 
		return, set, then, types, while, use},
	sensitive=false,
	morecomment=[l]{//},
	morecomment=[s]{/*}{*/}
}

\lstnewenvironment{JsCode}[1][]
{\lstset{%
	language=JavaScript,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Code Environment for LaTeX
\lstnewenvironment{LaTeXCode}[1][]	% code environment for Latex
{\lstset{%
	language=[LaTeX]TeX,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Code Environment for Objective-C
\lstnewenvironment{ObjCCode}[1][]
{\lstset{%
	language=[Objective]C,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Code Environment for PHP
\lstnewenvironment{PhpCode}[1][]
{\lstset{%
	language=PHP,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Language Definition and Code Environment for Swift
\lstdefinelanguage{Swift}
{	keywords=[1]{typealias,true, false,catch,private,internal,public,func,protocol,%
		optional,return,nil,catch,switch,let,as,var,if,in,for,while,where,do,else,case,%
		break,import,class,struct,enum,override,super,required,designated,convenience},
	keywords=[2]{String,Int,Double,Float},
	sensitive=true,
	morecomment=[l]{//},
	morecomment=[s]{/*}{*/},
	morestring=[b]',
	morestring=[b]"
}

\lstnewenvironment{SwiftCode}[1][]
{\lstset{%
	language=Swift,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}


% Code Environment for XML
\lstnewenvironment{XmlCode}[1][]
{\lstset{%
	language=XML,
	escapeinside={/+}{+/}, % makes "/+" and "+/" available for Latex escapes (labels etc.)
	#1}}%
{}

% Language Definition and Code Environment for FSharp
\lstdefinelanguage{FSharp}{
  morekeywords={abstract,and,as,assert,base,begin,%
    class,default,delegate,do,done,downcast,downto,%
    elif,else,end,extern,false,finally,for,fun,%
    function,if,in,inherit,inline,interface,internal,lazy,%
    let,match,member,module,mutable,namespace,%
    new,not,null,of,open,or,override,private,public,rec,%
    return,static,struct,then,to,true,try,type,upcast,use,%
    val,void,when,while,with,yield,asr,land,lor,lsl,lsr,lxor,%
    mod,sig,atomic,break,checked,component,const,%
    constraint,constructor,continue,eager,external,%
    fixed,functor,global,include,method,mixin,object,%
    parallel,process,protected,pure,sealed,tailcall,trait,virtual,volatile},     
  sensitive=true,
  morecomment=[l][\color{commentColor}]{///},
  morecomment=[l][\color{commentColor}]{//},
  morecomment=[s][\color{commentColor}]{{(*}{*)}},
  morestring=[b]"
}

\lstnewenvironment{FSharpCode}[1][]
{\lstset{%
  language=FSharp,
  mathescape=false,
  escapeinside={/+}{+/},
  #1}}%
{}